#summary Start page for installing / running PyCCSM

|| [PyCCSM] ||

= Installation =

== PyMCT ==
[InstallPyMCT]

== CCSM ==

Assuming you have a CCSM built on your platform of choice, it's relatively straightforward to modify it to be compatible with our Python coupler.

The main difference between PyCCSM and CCSM is that MPH is not used for initialization.  Other then that the 2 codebases are identical.

Replacing MPH without own initialization routine is a 3 step process.  First, we add our initialization routine to the CCSM shared source.  Next, we copy the main program of each component model into our CCSM Case's _SourceMods_ directory and slightly modify the source to call the new initialization routine.  Finally, we recompile CCSM using the standard CCSM build system.

=== Step 1: Adding our alternate start up ===

*Download* the PyCCSM initialization code from this site:
[http://pyccsm.googlecode.com/svn/trunk/cpl_comm_mod.F90.withoutMPH cpl_comm_mod.F90.withoutMPH]

*Locate* your CCSM source.  It is likely in a subdirectory like _ccsm3\_0_ on your system.
Find it and change directories to it.
{{{
$ pwd
/home/steder/
$ ls | grep -i ccsm
ccsm3_0/
CCSM.txt
$ cd ccsm3_0/
$ ls
Copyright*  models/  README*  scripts/
$ cd models/
$ ls
atm/  bld/  cpl/  csm_share/  dead/  ice/  lnd/  ocn/  utils/
$ cd csm_share/
$ ls
cpl/  shr/
$ cd cpl/
$ ls
cpl_bundle_mod.F90*    cpl_control_mod.F90*  cpl_interface_mod.F90*  cpl_map_mod.F90*
cpl_comm_mod.F90*      cpl_domain_mod.F90*   cpl_iobin_mod.F90*      cpl_mct_mod.F90*
cpl_const_mod.F90*     cpl_fields_mod.F90*   cpl_iocdf_mod.F90*      netcdf.inc*
cpl_contract_mod.F90*  cpl_infobuf_mod.F90*  cpl_kind_mod.F90*
}}}

Now we need to take this file and put it in place of the original.  So first we'll move the original file someplace so we can retrieve it if we ever need it.

{{{
$ cp cpl_comm_mod.F90 cpl_comm_mod.F90.backup
}}}

Then we'll go ahead and download the new version to this directory
{{{
$ wget http://pyccsm.googlecode.com/svn/trunk/cpl_comm_mod.F90.withoutMPH 
--17:44:39--  http://pyccsm.googlecode.com/svn/trunk/cpl_comm_mod.F90.withoutMPH
           => `cpl_comm_mod.F90.withoutMPH'
Resolving pyccsm.googlecode.com... done.
Connecting to pyccsm.googlecode.com[66.102.1.82]:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 17,137 [text/plain]

100%[============================================================>] 17,137        74.05K/s    ETA 00:00

17:44:40 (74.05 KB/s) - `cpl_comm_mod.F90.withoutMPH' saved [17137/17137]

$ ls
cpl_bundle_mod.F90*          cpl_contract_mod.F90*  cpl_interface_mod.F90*  cpl_mct_mod.F90*
cpl_comm_mod.F90*            cpl_control_mod.F90*   cpl_iobin_mod.F90*      netcdf.inc*
cpl_comm_mod.F90.backup*     cpl_domain_mod.F90*    cpl_iocdf_mod.F90*
cpl_comm_mod.F90.withoutMPH  cpl_fields_mod.F90*    cpl_kind_mod.F90*
cpl_const_mod.F90*           cpl_infobuf_mod.F90*   cpl_map_mod.F90*
}}}

And finally, we'll copy the new initialization code over the original.  Remember, we should also have a backup of the original initialization code somewhere.
{{{
$ cp cpl_comm_mod.F90.withoutMPH cpl_comm_mod.F90
cp: overwrite `cpl_comm_mod.F90'? y
}}}

=== Step 2: Setting up our SourceMods ===

Now we need to modify the main of each component program to use our replacement MPH:

We'll most likely want to create a brand new CCSM case for our PyCCSM runs.  So we'll start by locating our CCSM scripts.  They're usually located in a subdirectory with the CCSM source distribution.  

Assuming our CCSM 3 source is downloaded to our home directory in a directory called *ccsm3\_0* our scripts will be:
{{{
steder@joxaren:~/ccsm3_0/scripts$ pwd
/home/steder/ccsm3_0/scripts
steder@joxaren:~/ccsm3_0/scripts$ cd  
steder@joxaren:~$ cd ccsm3_0/
steder@joxaren:~/ccsm3_0$ pwd
/home/steder/ccsm3_0
steder@joxaren:~/ccsm3_0$ ls
Copyright  README  models/  scripts/
steder@joxaren:~/ccsm3_0$ cd scripts/
steder@joxaren:~/ccsm3_0/scripts$ ls
CCSM.txt  ccsm_utils/      create_test*  deadtest/  jazz_cases/
README    create_newcase*  data/         fulltest/  pyccsmtest/
}}}

=== Dead Model Case ===

First you will need to create a dead model case in CCSM.  You can do this by running the CCSM script *create\_newcase* with the following flags:

{{{
steder@joxaren:~/ccsm3_0/scripts$ ./create_newcase -case pyccsm-dead-models -mach jazz -res T31_gx3v5 -compset X 
Successfully added env_mach.jazz to /home/steder/ccsm3_0/scripts/pyccsm-dead-models
Successfully created new case root directory /home/steder/ccsm3_0/scripts/pyccsm-dead-models
}}}

Now let's change into our newly created test case directory:
 
{{{
steder@joxaren:~/ccsm3_0/scripts$ cd pyccsm-dead-models/
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ ls
SourceMods/  configure*  env.readme  env_conf  env_mach.jazz*  env_run
}}}

Assuming that the CCSM model source code is in the default location:

{{{
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ ls ../../models/                    
atm/  bld/  cpl/  csm_share/  dead/  ice/  lnd/  ocn/  utils/
}}}

We'll now copy the dead model main program into our case's directory:

{{{
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ cp ../../models/dead/dead6/dead.F90 .
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ ls
SourceMods/  configure*  dead.F90  env.readme  env_conf  env_mach.jazz*  env_run
}}}

Now we'll edit dead.F90 to use our new initialization routine.  We're going to make just a few small modifications to this file.  Here's the first.

*Add a use statement to include our new code*
{{{
subroutine dead_init()

! !USES:                                                                                        

   use cpl_interface_mod
   use cpl_fields_mod
   use cpl_contract_mod
   use cpl_control_mod
   use shr_const_mod
   use shr_timer_mod
   use shr_sys_mod
   use shr_msg_mod
   use shr_kind_mod
   use data_mod

   implicit none
}}}

The above needs to be modified by adding the following use statement (these are lines 59-73):
{{{
subroutine dead_init()

! !USES:                                                                                        

   use cpl_interface_mod
   use cpl_fields_mod
   use cpl_contract_mod
   use cpl_control_mod
   use shr_const_mod
   use shr_timer_mod
   use shr_sys_mod
   use shr_msg_mod
   use shr_kind_mod
   use data_mod
   use cpl_comm_mod 

   implicit none
}}}

**

Next, look for a little later on in the file(lines 204-206):
{{{
   !----------------------------------------------------------------------------   
   ! initialize local MPH & MPI                                                                 
   !----------------------------------------------------------------------------                
   call cpl_interface_init(myModelName,local_comm)
}}}

We'll comment out the old call to cpl_interface_init and replace it with the following:
{{{
   !----------------------------------------------------------------------------   
   ! initialize local MPH & MPI                                                                 
   !----------------------------------------------------------------------------                
   !call cpl_interface_init(myModelName,local_comm)
   call cpl_comm_init(myModelName, local_comm)
}}}

Now we have a modified main for all 4 component dead models.  Let's place this in _SourceMods_ so our modifications will be included the next time we build this case.

{{{
$ ln -s ../../dead.F90 SourceMods/src.xice/dead.F90
$ ln -s ../../dead.F90 SourceMods/src.xatm/dead.F90
$ ln -s ../../dead.F90 SourceMods/src.xlnd/dead.F90
$ ln -s ../../dead.F90 SourceMods/src.xocn/dead.F90
$ ls
SourceMods/  configure*  dead.F90  env.readme  env_conf  env_mach.jazz*  env_run
$ ls -l SourceMods/src.x*/
SourceMods/src.xatm/:
total 8
-rw-r--r--  1 steder users 59 Feb  8 23:10 README
lrwxrwxrwx  1 steder users 14 Feb  8 23:30 dead.F90 -> ../../dead.F90

SourceMods/src.xice/:
total 8
-rw-r--r--  1 steder users 59 Feb  8 23:10 README
lrwxrwxrwx  1 steder users 14 Feb  8 23:30 dead.F90 -> ../../dead.F90

SourceMods/src.xlnd/:
total 8
-rw-r--r--  1 steder users 59 Feb  8 23:10 README
lrwxrwxrwx  1 steder users 14 Feb  8 23:30 dead.F90 -> ../../dead.F90

SourceMods/src.xocn/:
total 8
-rw-r--r--  1 steder users 59 Feb  8 23:10 README
lrwxrwxrwx  1 steder users 14 Feb  8 23:30 dead.F90 -> ../../dead.F90
}}}

=== Live Model Case ===

The live model case is the most complicated because each live model has a different initialization code.  However, it really isn't much more complicated then the dead model case.  I'll simply go over the important files and their modifications briefly.

{{{
steder@joxaren:~/ccsm3_0/scripts/pyccsmtest$ ls SourceMods/src.cam SourceMods/src.clm/ SourceMods/src.csim/ SourceMods/src.clm/
SourceMods/src.cam:
README  cam.F90  

SourceMods/src.clm/:
README  clm_csmMod.F90

SourceMods/src.csim/:
README  ice_coupling.F

SourceMods/src.pop/:
README  forcing_coupled.F
}}}

*Editing cam.F90*
First, get the source file:
{{{
cp ../../models/atm/cam/src/control/cam.F90 .
ln -s ../../cam.F90 SourceMods/src.cam/cam.F90
}}}

Now update the use statements (starts at line 34):
{{{
#if (defined COUP_CSM)
   use shr_msg_mod
   use cpl_interface_mod
   use cpl_fields_mod
   ! Add this use statement:
   use cpl_comm_mod 
#endif
}}}

Now search for "cpl_interface_init" and replace it with "cpl_comm_init" (starts at line 100)
{{{
!                                                                                               
! Initialize internal/external MPI if appropriate                                               
!                                                                                               
#if ( defined COUP_CSM )
   call shr_msg_stdio('atm')
   !call cpl_interface_init(cpl_fields_atmname,mpicom)
   call cpl_comm_init( cpl_fields_atmname, mpicomm )
#endif
}}}

*Editing clm_csmMod.F90*
First, get the source file:
{{{
$ cp ../../models/lnd/clm2/src/main/clm_csmMod.F90 .
$ ln -s ../../clm_csmMod.F90 SourceMods/src.clm/clm_csmMod.F90
}}}

Now update the use statements (starts at line 23):
{{{
! !USES:                                                                                        
  use shr_kind_mod, only: r8 => shr_kind_r8
  use nanMod
  use clm_varpar
#if (defined SPMD)
  use spmdMod        , only : masterproc, mpicom
  use spmdGathScatMod, only : gather_data_to_master
#else
  use spmdMod        , only : masterproc
#endif
  use mpiinc
  use cpl_fields_mod
  use cpl_contract_mod
  use cpl_interface_mod
  ! add this use statement!
  use cpl_comm_mod
}}}

Now search for "cpl_interface_init" and replace it with "cpl_comm_init" (Starting at line 206)
{{{
! !LOCAL VARIABLES:                                                                             
!------------------------------------------------------------------------                       

   !call cpl_interface_init(cpl_fields_lndname,mpicom)
   call cpl_comm_init(cpl_fields_lndname,mpicomm)
}}}

*Editing ice_coupling.F*

First, get the source file:
{{{
$ cp ../../models/ice/csim4/src/source/ice_coupling.F .
$ ln -s ../../ice_coupling.F SourceMods/src.csim/ice_coupling.F
}}}

Now update the use statements (Starting at line 23):
{{{
! !USES:                                                                                        
!                                                                                               
      use ice_kinds_mod
      use ice_model_size
      use ice_constants
      use ice_calendar
      use ice_grid
      use ice_state
      use ice_flux
      use ice_albedo
      use ice_mpi_internal
      use ice_timers
      use ice_fileunits
      use ice_work, only: worka, work_l1
#ifdef coupled
      use shr_sys_mod, only : shr_sys_flush
      use ice_history, only : runtype
      use cpl_contract_mod
      use cpl_interface_mod
      use cpl_fields_mod
      ! Add this line:
      use cpl_comm_mod
}}}

Now search for "cpl_interface_init" and replace it with "cpl_comm_init" (Starting at line 102)
{{{
     write(nu_diag,*) 'calling cpl_interface_init for model: ',
     &     in_model_name,' ', trim(cpl_fields_icename)

!      call cpl_interface_init(cpl_fields_icename,model_comm)
     call cpl_comm_init(cpl_fields_icename, model_comm)
}}}


*Editing forcing_coupled.F*

First, get the source file:
{{{
$ cp ../../models/ocn/pop/source/forcing_coupled.F .
$ ln -s ../../forcing_coupled.F SourceMods/src.pop/forcing_coupled.F
}}}

Now update the use statements (Starting at line 13):
{{{
      use kinds_mod
      use model_size
      use domain
      use communicate
      use constants
      use io
      use stencils
      use time_management
      use grid
      use prognostic
      use exit_mod
      use ice
      use forcing_shf
      use forcing_sfwf
      use qflux_mod
      use ms_balance
      use timers
      use cpl_contract_mod
      use cpl_interface_mod
      ! Add this line!
      use cpl_init_mod
      use cpl_fields_mod
      use shr_sys_mod
      use registry
}}}

Now search for "cpl_interface_init" and replace it with "cpl_comm_init" (Starting at line 1509)
{{{
!      call cpl_interface_init(cpl_fields_ocnname,MPI_COMM_OCN)
      call cpl_comm_init(cpl_fields_ocnname, MPI_COMM_OCN)
      end subroutine ocn_coupling_setup
}}}


=== Modifying the Fortran Coupler ===

If you would like to run CCSM with the Fortran coupler (perhaps to simply verify that CCSM runs properly with the new initialization routine, here's a quick description of the modifications necessary to force the CCSM coupler to use the new initialization.

*Get main.F90*
{{{
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ cp ../../models/cpl/cpl6/main.F90 .
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ ln -s ../../main.F90 SourceMods/src. 
src.cam   src.cpl   src.datm  src.dlnd  src.latm  src.xatm  src.xlnd  
src.clm   src.csim  src.dice  src.docn  src.pop   src.xice  src.xocn  
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ ln -s ../../main.F90 SourceMods/src.
src.cam   src.cpl   src.datm  src.dlnd  src.latm  src.xatm  src.xlnd  
src.clm   src.csim  src.dice  src.docn  src.pop   src.xice  src.xocn  
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ ln -s ../../main.F90 SourceMods/src.cpl/main.F90
steder@joxaren:~/ccsm3_0/scripts/pyccsm-dead-models$ ls -l SourceMods/src.cpl/
total 8
-rw-r--r--  1 steder users 152 Feb  8 23:10 README
lrwxrwxrwx  1 steder users  14 Feb  8 23:35 main.F90 -> ../../main.F90
}}}
*Add the use statement*
Lines 22-41:
{{{
program cpl

! !USES:                                                                                        

   use shr_date_mod       ! shr code: date/time data type & methods                             
   use shr_msg_mod        ! shr code: i/o redirect, chdir                                       
   use shr_sys_mod        ! shr code: wrappers to system calls                                  
   use shr_timer_mod      ! shr code: timing utilities                                          
   use shr_mpi_mod        ! shr code: mpi layer                                                 

   use cpl_kind_mod       ! kinds for strong typing                                             
   use cpl_mct_mod        ! wrapper/access to mct lib                                           
   use cpl_comm_mod       ! MPI process & communicator group info                               
   use cpl_fields_mod     ! fields lists common to cpl & components                             
   use cpl_contract_mod   ! contract (message-passing) data type & methods                      
   use cpl_interface_mod  ! contract/message-passing wrapper routines                           
   use cpl_infobuf_mod    ! information buffer module                                           
   use cpl_control_mod    ! control flags/logic subsystem module                                
   use cpl_map_mod        ! mapping subsystem module                                            
!  use cpl_iocdf_mod      ! netCDF file i/o routines (for debug data dumps)   
}}}

Simply add our updated module to this list:
{{{
program cpl

! !USES:                                                                                        

   use shr_date_mod       ! shr code: date/time data type & methods                             
   use shr_msg_mod        ! shr code: i/o redirect, chdir                                       
   use shr_sys_mod        ! shr code: wrappers to system calls                                  
   use shr_timer_mod      ! shr code: timing utilities                                          
   use shr_mpi_mod        ! shr code: mpi layer                                                 

   use cpl_kind_mod       ! kinds for strong typing                                             
   use cpl_mct_mod        ! wrapper/access to mct lib                                           
   use cpl_comm_mod       ! MPI process & communicator group info                               
   use cpl_fields_mod     ! fields lists common to cpl & components                             
   use cpl_contract_mod   ! contract (message-passing) data type & methods                      
   use cpl_interface_mod  ! contract/message-passing wrapper routines                           
   use cpl_infobuf_mod    ! information buffer module                                           
   use cpl_control_mod    ! control flags/logic subsystem module                                
   use cpl_map_mod        ! mapping subsystem module                                            
!  use cpl_iocdf_mod      ! netCDF file i/o routines (for debug data dumps)   
   use cpl_comm_mod
}}}

*Change the init call*
Lines 168-172:
{{{
   !----------------------------------------------------------------------------                
   ! determine cpl6's MPI communicator group, redirect stdin/out as necessary                   
   !----------------------------------------------------------------------------                
   call cpl_interface_init(cpl_fields_cplname,local_comm)
}}}
Changes to:
{{{
   !----------------------------------------------------------------------------                
   ! determine cpl6's MPI communicator group, redirect stdin/out as necessary                   
   !----------------------------------------------------------------------------                
   !call cpl_interface_init(cpl_fields_cplname,local_comm)
   call cpl_comm_init(cpl_fields_cplname, local_comm)
}}}

That's it!  Your Fortran Coupler should now be using the new initialization code.  All you should have to do is rebuild the case.

== PyCPL ==

=== Dependencies ===

First we'll need to install [MaroonMPI] and [PyCDF].

Instructions for MaroonMPI can be found:
[http://code.google.com/p/maroonmpi/ On MaroonMPI's Google Code page]

Instructions for [PyCDF] can be found on our [PyCDF] page.

=== Installation ===

Finally, we have to 
 * download the PyCPL mapping data files for our specific CCSM resolution
 * Check, modify, and confirm the settings in cpl.nml
 * Update the logpath inside the main.py script.


= Running PyCCSM =

== Modifying CCSM Run Scripts ==

Involves:
 * Make a copy of one of your CCSM run scripts
 * Edit the copy ... example coming

Very dependent on your specific computing environment.

|| PyCCSM ||

