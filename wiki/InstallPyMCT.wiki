# Installation instructions for PyMCT

= Introduction =
This goal of this document is to walk through the steps to configure, build, and install PyMCT and setup an environment for writing and running MCT programs in Python.

= Requirements =
=== Compilers and Languages ===
We expect you to have:
  * C Compiler
  * Fortran 90 Compiler (Portland Group Fortran is incompatible <link>!)
  * Java JDK
  * Python 2.4 or later

=== Libraries ===
  * MPI (We prefer MPICH2, but others should work)
  * MPI with Dynamic Library support enabled (--enable-sharedlibs configuration option)
  * NetCDF
If you do not know if you have any of the above software installed and properly configured on the system you intend to use for PyMCT you will need to install or reconfigure the missing or misconfigured packages before you can begin the installation of PyMCT.

= Installation = 

== Overview ==
=== Stage 0 ===
Stage 0 is useful for administrators looking to setup their machine to use PyMCT from a fresh installation.  If you do not have  necessary compilers or basic libraries you should start here.
=== Stage 1 ===
Initial Configuration of the PyMCT environment
=== Stage 2 ===
This stage assumes that all the requirements are out of the way and deals with installation of:
  * Chasm
  * Python Array Modules
  * Python MPI Module
=== Stage 3 ===
This stage builds the Babel Compiler.  This is a large and sophisticated application.  
=== Stage 4 ===
Here we use Babel to update the bindings.  We then modify makefiles to fit our system and compile and install the MCT Server and Client libraries.
=== Stage 5 ===
This is our final stage which consists of just installing some useful utility packages.

= Stage 0 =

== MPICH ==
The only configuration options that have to be set are those flags to enable Fortran 90 support for your compiler
and another single flag to enable support for shared (dynamic) MPI libraries.

=== Fortran ===

For compatibility reasons with other Fortran compilers it is strongly encouraged that when you build MPI for your Fortran compiler that you specify the linkage conventions for symbols.

|| Compiler || Convention || Example ||
|| G77 || All Symbols are lowercase with an appended underscore || subroutine ComputeFlux -> computeflux_ ||
|| Absoft || Defaults to Mixed Case, No Underscore || ComputeFlux -> ComputeFlux ||
|| PGI || Same conventions as G77 || ComputeFlux -> computeflux_ ||
|| Intel || Same conventions as G77 || ComputeFlux -> computeflux_ ||

So if you perchance have to use the Absoft F90 compiler, or some other compiler with differing linkage conventions it's important that you look into compiler options to modify those linkage conventions to make them compatible with other compilers.  

The consequences of not doing this are building specialized versions of nearly every system library for each compiler which uses a different convention.  Generally this is far more work then simply changing the compilers default conventions to match the other compilers on your system.

*Flags for the Absoft Fortran Compilers*
{{{
FFLAGS=-f -N15                                                                    
FCFLAGS=-YEXT_NAMES=LCS -YEXT_SFX=_                                               
F90FLAGS=-YEXT_NAMES=LCS -YEXT_SFX=_    
}}}
Set these environment variables in your shell before continuing with the configuration.

=== Configuration ===

Unpack the mpich source into a convenient directory and move to where the MPICH _configure_ script is located.  For example:
{{{
-bash-2.05b$ cd mpich2-1.0.2p1/
-bash-2.05b$ pwd
/home/steder/mpich2-1.0.2p1
-bash-2.05b$ ls
bin/            COPYRIGHT.rtf*    mpich2.sln*           README.romio*
CHANGES*        doc/              mpich2s.vcproj*       README.testing*
conf19599.sh*   examples/         mpich2s.vs05.vcproj*  README.winbin.rtf*
confdb/         lib/              mpich2.vcproj*        README.windeveloper*
config.log*     maint/            mpich2.vs05.sln*      README.windows*
config.status*  Makefile*         mpich2.vs05.vcproj*   RELEASE_NOTES*
config.system*  Makefile.in*      mpi.def*              src/
configure*      Makefile.sm*      mpi.vcproj*           test/
configure.in*   makewindist.bat*  mpi.vs05.vcproj*      winconfigure.wsf*
CONFTEST.mod*   man/              README*               www/
COPYRIGHT*      mpich2.def*       README.developer*
}}}

The first  issue we want to make sure we address is enabling dynamic/shared library support.  For MPICH1/MPICH2 this can be accomplished by adding the following flags to the configure line.

For example:
{{{
-bash-2.05b$ ./configure --enable-sharedlibs=gcc
}}}
OR
{{{
-bash-2.05b$ ./configure --enable-sharedlibs=osx-gcc
}}}

The second issue is regarding the Fortran 90 flags we picked out to change the Fortran compilers linking conventions.  Whether are environment is updated or not we can simply specify the flags right on the configure line:
{{{
-bash-2.05b$ ./configure --enable-sharedlibs=osx-gcc  --enable-f90 FCFLAGS="-f -N15" F90FLAGS="-YEXT_NAMES=LCS -YEXT_SFX=_"                 
}}}

Assuming FFLAGS, FCFLAGS, and F90FLAGS are set in our environment our final configure line can be just the following.  Additional options, for instance device or debugging support are perfectly acceptable to add if desired.  
{{{
-bash-2.05b$ ./configure --enable-sharedlibs=gcc --enable-f90
}}}